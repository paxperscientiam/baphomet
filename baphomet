#!/usr/bin/env bash
# shellcheck disable=2093
#set -x
set -u
shopt -s extglob
shopt -s nullglob
shopt -s nocasematch
:
function cleanup {
    printf '\n\n\e[7mI'"'"'ll be seeing you.\e[0m\n\n'
    printf 'Cleaning up ... '
    kill %1 >/dev/null 2>&1
    wait
    (sleep 20
     if hard_check "${daemon}"
     then
         slay "${daemon}" >/dev/null 2>&1
     fi
    ) &
    disown %1
    printf 'done.\n\n'

    [[ "${#daemon}" -gt 0 ]] && \
        printf 'Note: The daemon \e[91m%s=\e[0m may have materialized despite interruption.\n' "${daemon^^}" && \
        printf "Attempting to slay in the background.\\n\\n" && \
        printf "Enter \`baphomet -l\` to be sure.\\n"
    exit
}
trap cleanup TERM INT SIGINT SIGTERM
:
case ${@:1:1} in
    -x|--escape)
        exec command emacs "${@:2}"
        exit
        ;;
esac
# # # # #
# U T I L
# # # # #
containsElement () {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}

userTest () {
    [[ ${#@} -ne 0 ]] && USER="${1}"
    :
    id -u "${USER}" >/dev/null 2>&1
    if [[ $? -eq 1 ]]; then
        printf 'The user %s is not known to exist.\n' "${USER^^}"; return 1
    fi
    return 0
}
userTest
:
EMACS_SOCKET_DIR="/tmp/baphomet/${USER}/"

INTERACTIVE=
EMACS_BUFFER_NAME=

[[ ! -d $EMACS_SOCKET_DIR  ]] && mkdir -p "${EMACS_SOCKET_DIR}"


LISP_FRAME_CHECK=$'(if (> (length (frame-list)) 1) '"'"'t)'
:
LISP_BUFFER_COUNT=$'(length (cl-remove-if-not '"'"'buffer-file-name (buffer-list)))'
:
LISP_BUFFER_LIST=$'(format "%s" (cl-remove-if-not '"'"'buffer-file-name (buffer-list)))'
:
LISP_PID=$'(emacs-pid)'
LISP_BUFFER_HEADER=$'(setq header-line-format "BAPHOMET")'
:
LISP_GREET_BUFFER=$'(with-temp-message "BAPHOMET WELCOMES YOU")'
# LISP_GREET_BUFFER=$''"'"'(with-current-buffer (get-buffer-create "asdfdemo")
#                   (erase-buffer)
#                   (insert "FAK")
#                   (pop-to-buffer (current-buffer)))'"'"''


ALTERNATE_EDITOR=""


hard_check () {
    local socket="${EMACS_SOCKET_DIR}/${1}"
    [[ -S $socket ]] && return 0
    :
    return 1
}

list_sockets () {
    local socket
    local daemon
    :
    # b=($(basename ${a[@]}))
    :
    arrSockets=("${EMACS_SOCKET_DIR}"/*)
    arrDaemons=()
    :
    for socket in "${arrSockets[@]}"
    do
        if [[ -S $socket ]]; then
            arrDaemons+=("$(basename "${socket^^}")")
            #            arrDaemons+=("${daemon//!//}")
        fi
    done
}
# generate sockets array
list_sockets



query_daemon () {
    unset result
    local element
    local CMD="${!1}"
    :
    for s in "${arrSockets[@]}"
    do
        read -r element < <(nc -U "${s}" <<< \
                               $"-eval ${CMD// /&_}" | \
                                awk $'NR == 2 {printf $2}')
        result+=("${element}")
    done
}

message_daemon () {
    unset CMD
    local CMD="${!1}"
    if [[ "${#2}" -gt 0 ]]; then
        nc -U "${2}" <<< \
           $"-eval ${CMD// /&_}"
    fi
}

slay () {
    local socket
    socket="${EMACS_SOCKET_DIR}/$(basename "${1}")"
    nc -U "${socket}" <<< '-eval (kill-emacs)' >/dev/null 2>&1 &
    printf 'Slaying daemon known as \e[33m%s\e[0m ...' "$(basename "${socket/%/=}")"
    wait
    printf ' done.\n'
    printf ' So slain.\n'
}

sanitize () {
    unset result
    :
    result="${1//[^a-zA-Z0-9\/]/}"
    result="${result////!}"
    result="${result%!}"
    result="${result#!}"
}


while [[ ${#@} -ne 0 ]]
do
    case $1 in
        -i|--interactive|--shell)
            break  3
            ;;
        # -u|--user)
        #     [[ ${#2} -eq 0 ]] && \
            #         printf 'A user must be specified!\n' && exit 1
        #     userTest "${2}"
        #     [[ $? -eq 1 ]] && exit 1
        #     :
        #     EMACS_SOCKET_DIR="/tmp/baphomet/${USER}/"
        #     #cmd_user=$"--user ${USER}"
        #     ;;
        --join|-j)
            daemon="${2//=/}"
            if [[ ${#daemon} -eq 0 ]]; then
                [[ "${#arrSockets[@]}" -eq 0 ]] && printf '|- There are no daemons here.\n' && exit
                printf '\e[33m%.0s-' {1..20}; printf '\n'
                printf '     DAEMON MENU\n'
                printf '%.0s-' {1..20};  printf '\e[0m\n\n'
                printf '\e[37;4;2m%s\e[0m\n' "${EMACS_SOCKET_DIR}"

                select daemon in "${arrDaemons[@]}" ${OFFER:+"Commune with $OFFER="} "Quit"
                do
		                [[ "${daemon^^}" == "QUIT"  ]] && \
			                  printf '\nBye.\n\n' && \
			                  exit 0
		                :
                    if [[ $INTERACTIVE == TRUE ]]; then
                        case $daemon in
                            'back')
                                exec "${0}" -i
                                ;;
                        esac
                    fi
		                exec "${0}" -j "${daemon}"
                done
                exit
            fi
            :
            socket="${EMACS_SOCKET_DIR}/${daemon}"
            if containsElement "${socket}" "${arrSockets[@]}"
            then
                exec emacsclient -q -c -s "${socket}" -- ${EMACS_BUFFER_NAME:+"$EMACS_BUFFER_NAME"}
            else
                printf '\e[31mDaemon not found!\e[0m\n'
                OFFER="${daemon}" exec "${0}" -j
            fi
            exit
            ;;
        --list|--list-daemons|-l|-ls)
            printf '\e[37;4;2m%s\e[0m\n' "${EMACS_SOCKET_DIR}"
            if [[ ${#arrSockets[*]} -eq 0 ]]; then
                printf '|- No daemons found.\n';exit
            fi
            printf '|- \e[33m%s\e[0m\n' "${arrDaemons[@]:1:3}"
            if  [[ $INTERACTIVE == TRUE ]]; then
                printf '\n\n\e[31mWhat do you desire?\e[0m\n'
                select option in 'Return' 'Quit'
                do
                    case $option in
                        'Return')
                            exec "${0}" -i
                            ;;
                        'Quit')
                            exit
                            ;;
                    esac
                done
            fi
            exit
            ;;
        --list-very-verbose|-lvv)
            query_daemon LISP_BUFFER_COUNT; arrBuffers=("${result[@]}")
            query_daemon LISP_PID; arr_pids=("${result[@]}")

            printf '\e[37;4;2m%s\e[0m\n\n' "${EMACS_SOCKET_DIR}"
            printf '\e[37;4;2m%-20s %-23s %-20s\e[0m\n' "Daemon" "File #" "PID"
            paste <(printf '|- \e[33m%-20s\e[0m\n' "${arrDaemons[@]/%/=}") <(printf '%-20s\n' "${arrBuffers[@]}") <(printf '%-20s\n' "${arr_pids[@]}")
            exit
            ;;
        --list-verbose|-lv)
            query_daemon LISP_BUFFER_COUNT; arrBuffers=("${result[@]}")
            :
            printf '\e[37;4;2m%s\e[0m\n\n' "${EMACS_SOCKET_DIR}"
            printf '\e[37;4;2m%-20s %s\e[0m\n' "Daemon" "File #"
            paste <(printf '|- \e[33m%-20s\e[0m\n' "${arrDaemons[@]/%/=}") <(printf '%s\n' "${arrBuffers[@]}")
            exit
            ;;
        --list-buffers|-lb)
            query_daemon LISP_BUFFER_LIST
            printf '\e[37;4;2m%-20s %s\e[0m\n' "Daemon" "File buffers"
            paste <(printf '|- \e[33m%-20s\e[0m\n' "${arrSockets[@]/%/=}") <(printf '%s\n' "${arrBuffersData[@]}")
            exit
            ;;
        --kill-all|-ka)
            DIE="DIE"
            ;&
        --stop|--kill|-k)
            :
            printf '\e[37;4;2m%s\e[0m\n' "${EMACS_SOCKET_DIR}"
            [[ "${#arrSockets[@]}" -eq 0 ]] && \
                printf 'No daemons to slay.\n' && exit
            :
            if [[ $DIE == "DIE" ]]; then
                for socket in "${arrSockets[@]}"
                do
                    slay "${socket}"
                done
                exit
            fi
            :
            daemon="${2}"
            socket="${EMACS_SOCKET_DIR}/${daemon}"
            if [[ ${#daemon} -eq 0 ]]
            then
                printf "Choose a daemon to slay:\\n" && \
                    select sock in "${arrDaemons[@]}"
                    do
                        if [[ ${#sock} -eq 0  ]]; then
                            printf '\e[31mBad choice.\e[0m\n'
                            exec "${0}" -k
                        fi
                        slay "${sock}"
                        exit
                    done
            fi
            :
            if [[ "${#daemon}" -ne 0 ]]; then
                containsElement "${socket}" "${arrSockets[@]}"
                if [[ $? -eq 1 ]]; then
                    printf "No such demon.\\n"
                else
                    slay "${socket}"
                fi
                exit
            fi
            :
            exit
            ;;
        --file|-f|--buffer|-b)
            if [[ ${#2} -eq 0 ]]; then
                printf 'No file or buffer specified!\n';exit
            else
                EMACS_BUFFER_NAME="${2}"
            fi
            ;;
        --start|--summon|-c|-s)
            IFS=,
            daemons="${2}"
            :
            if [[ ${#daemons} -eq 0 ]]; then
                if [[ ${#arrDaemons[*]} -eq 0 ]]; then
                    daemons="server"
                else
                    daemons="${arrDaemons[0]}"
                fi
            fi
            :
            for daemon in $daemons; do
                :
                sanitize "${daemon}"
                daemon="${result}"
                socket="${EMACS_SOCKET_DIR}/${daemon}"
                if containsElement "${socket}" "${arrSockets[@]}"
                then
                    exec "${0}" -j "${daemon}" "${@:3}"
                else
                    \emacs --eval "${LISP_GREET_BUFFER}" --user="${USER}" --daemon="${socket}" > /dev/null 2>&1 &
                    printf '      Summoning the daemon \e[91m%s=\e[0m ...' "${daemon^^}"
                    wait %1
                    printf ' done. \n'
                    printf 'So summoned.\n'
                    [[ "${#EMACS_BUFFER_NAME}" -gt 0 ]] && \
                        exec "${0}" -b "${EMACS_BUFFER_NAME}" -j "${daemon}"
                fi
            done
            exit
            ;;
        -D)
            printf 'Debug mode not ready!\n'
            exit
            ;;
        -W)
            printf 'Watch all daemonic activity.\n'
            exit
            ;;
        --)
            EMACS_BUFFER_NAME="${2}"
            break 3
            ;;
        --help|-h)
            printf "\\x1b[38;2;250;0;0m%s\\x1b[0m\\n" \
                   "BAPHOMET -- manage your emacs daemons"
            printf "\\x1b[38;2;100;100;100m"
            cat <<'EOF'
 Usage: baphomet [switches] [arguments]
 -h,  --help                      Display help menu
 -s,  --start [name]              Start a daemon with name 'name'
 -k,  --kill, --stop [name]       Stop a daemon with name 'name'
 -ka, --kill-all                  Stop all daemons
 -j,  --join [name] -b [buffer]   Join a daemon with name 'name' and
                                       create a new buffer 'buffer'
 -l,  --list                      List known daemons
 -lv, --list-verbose              List daemons and file buffer count
 -lvv, --list-very-verbose        List daemons and file buffer count
                                       and daemon PID
 -i,  --interactive               Interactive mode

 -x,  --escape                    Exit script, run emacs as normal


Note:
 When called without arguments, baphomet starts a new daemon
      if necessary and opens a buffer with a default name.
 When called with only a buffer or filename, baphomet joins any daemon
      and creates buffer with specified name.

Examples with a daemon named 'joey'
 start daemon: baphomet --start joey
 stop daemon:  baphomet --stop joey
 join daemon:  baphomet --join joey

Disclaimer: Execute this script at your own peril.
EOF
            printf "\\x1b[0m"
            exit
            ;;
        -*)
            printf '\e[31mUnknown argument "%s"\e[0m\n\v' "${1}"
            exit 1
            ;;
        *)
            break;
            ;;
    esac
    [[ "${#@}" -gt 0 ]] && shift 2
done



case ${@:1:1} in
    -i|--interactive)
        printf '\e[33m%.0s-' {1..20}; printf '\n'
        printf '     MAIN MENU\n'
        printf '%.0s-' {1..20};  printf '\e[0m\n'
        select option in ${arrDaemons[@]:+'List'} ${arrDaemons[@]:+'Join'} 'Summon' 'Quit'
        do
            case $option in
                'List')
                    INTERACTIVE=TRUE exec "${0}" -l
                    ;;
                'Join')
                    INTERACTIVE=TRUE exec "${0}" -j
                    ;;
                'Summon')
                    printf '\n\e[31mName your daemon\e[0m: '
                    read -r daemon
                    [[ "${daemon^^}" == "BAPHOMET" ]] && printf 'No.\n' && exit 1
                    INTERACTIVE=TRUE exec "${0}" -s "${daemon}"
                    ;;
                'Quit')
                    printf '\nBye.\n'
                    exit
                    ;;
                *)
                    printf 'Invalid choice.\n'
                    ;;
            esac
        done
        ;;
esac


case ${@:1:1} in
    --shell)
        exec bash --rcfile <(read -r baphomet_shell < \
                                  <(printf '%s' "PS1='\\e[31mBAPHOMET\\e[0m > ' ;\
alias help=\"${0} -h\";\
alias list=\"${0} -l\";\
alias start=\"${0} -s\";\
alias kill=\"${0} -k\";\
alias kill-all=\"${0} -ka\";\
alias join=\"${0} -j\";\
"); printf '%s' "${baphomet_shell}") -i

        ;;
esac

# check_for_frames () {
#     local EMACS_SERVER=$1
#     [[ ${#EMACS_SERVER} -eq 0 ]] && \
    #         printf "You must specify a daemon!\n"

#     containsElement "${socket}" "${arrSockets[@]}"
#     [[ $?  -eq 0 ]] && \
    #         emacsclient -n -s "${EMACS_SERVER}" -e "${LISP_FRAME_CHECK}" | grep t > /dev/null 2>&1 && return $?
#     return 1
# }


socket="${arrSockets[0]}"
daemon="$(basename "${socket}")"
[[ ${#socket} -gt 0 ]] && \
    EMACS_BUFFER_NAME="${@:1:1}" exec "${0}" -j "${daemon}"

printf '\e[0;36m%s\e[0m\n' "No daemons found. Let's get interactive."
exec "${0}" --interactive

# containsElement "${socket}" "${arrSockets[@]}"
# if [[ $? -ne 0 ]]; then
#     QUICK=1 exec $0 -s "${EMACS_SERVER}" &
# else
#     EMACS_SERVER="${arrSockets[0]}"
# fi
# wait
# exit

# check_for_frames "${EMACS_SERVER}"
# if [ "$?" -eq 0 ]; then
#     cmd='emacsclient -c -s '
# else
#     cmd='emacsclient -s '
# fi


# [[ ${#EMACS_BUFFER_NAME} -eq 0 ]] && EMACS_BUFFER_NAME="${EMACS_BUFFER_DEFAULT}"

# # when no arguments supplies, join the first daemon
# if [[ ${#@} -eq 0 ]]; then
#     exec eval "${cmd} ${EMACS_SERVER} -e ${LISP_GREET_BUFFER}"
#     exit
# fi
