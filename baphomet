#!/usr/bin/env bash
:
# Execute this script at your own peril!
:
case $1 in
    -x|--escape)
        command emacs "${@:2}"
        exit
        ;;
esac

shopt -s nullglob
shopt -s extglob
#shopt -s nocasematch

# thank defanor for this:
# to the server: nc -U server <<< 'COMMAND'
# # -file FILENAME, eval EXPR

# to get PID nc -U server <<< '-ignore' | awk -F ' ' '{print $2}'
# so get status by using nc instead of emacs directly
#  defanor> physikoi_: i don't know, but perhaps one can start investigating by
#                  checking `server-mode', and `server-process-filter' in particular
# 15:24 < defanor> there seems to be quite an informative docstring with command listing
#                  and descriptions
# 15:27 < defanor> seems to work that way: $ nc -U /tmp/emacs1000/server <<< '-eval
#                  (emacs-version)' / -emacs-pid 20534 / -print
# "GNU&_Emacs&_25.3.1&_(x86_64&-pc&-linux&-gnu,&_GTK+&_Version&_3.14.13)\n&_of&_2017&-09&-12

LISP_FRAME_CHECK=$'(if (> (length (frame-list)) 1) \'t)'
#'
LISP_BUFFER_COUNT=$'(length (cl-remove-if-not \'buffer-file-name (buffer-list)))'
#'
LISP_BUFFER_LIST=$'(format "%s" (cl-remove-if-not \'buffer-file-name (buffer-list)))'
#'  (format "%s" (cl-remove-if-not 'buffer-file-name (buffer-list)))
LISP_BUFFER_HEADER=$'(setq header-line-format "BAPHOMET")'
#'

LISP_GREETING=$'(momentary-string-display "BAPHOMET" 200)'
#'

SCRIPT_NAME=$(basename $0)

ALTERNATE_EDITOR=""
EMACS_SERVER="server"
EMACS_SERVER_RANDOM=""
EMACS_SOCKET_DIR="${TMPDIR-/tmp}/emacs$(id -u)/"

EMACS_BUFFER_NAME=""
EMACS_BUFFER_DEFAULT="baphomet_default_buffer"

readonly ERR_MISSING_SOCKET=404


# # # # #
# U T I L
# # # # #
containsElement () {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}

list_sockets () {
    local sock
    read -r -a Msg <<< \
         '# generate list of daemon sockets'
    [[ $1 == "DEBUG" ]] && printf '%s\n' "${Msg[*]}"
    :
    arrSockets=()
    :
    for socket in $EMACS_SOCKET_DIR/*; do
        if [[ -S $socket ]]; then
            sock="$(basename ${socket})"
            arrSockets+=("${sock}")
        fi
    done
}
list_sockets

count_buffers () {
    arrBuffers=()
    if [[ ${#arrSockets[*]} -gt 0 ]]; then
        for s in "${arrSockets[@]}"
        do
            read count < <(command emacsclient -e "${LISP_BUFFER_COUNT}" -s "${s}")
            arrBuffers+=("${count// /}")
        done
    else
        return 1
    fi
}


list_buffers () {
    arrBuffersData=()
    if [[ ${#arrSockets[*]} -gt 0 ]]; then
        for s in "${arrSockets[@]}"
        do
            read count < <(command emacsclient -e "${LISP_BUFFER_LIST}" -s "${s}")
            
            arrBuffersData+=("${count}")
        done
    else
        return 1
    fi

    }

get_pids () {
    arr_pids=()
    if [[ ${#arrSockets[*]} -gt 0 ]]; then
        for socket in $EMACS_SOCKET_DIR/*
        do
            if [[ -S $socket ]]; then
                read pud < <(command nc -U "${socket}" <<< '-ignore' | awk -F ' ' '{print $2}')
                arr_pids+=("${pud// /}")
            fi
        done
    fi
}

check_for_socket () {
    :
    # check if supplied socket ref exists
    if [[ ${#1} -ne 0 ]]; then
        containsElement "${1//=/}" "${arrSockets[@]}";
        return $?
    fi
    :
    return 1
}


while [[ ${#@} -ne 0 ]]
do
    case $1 in
        -i|--interactive)
            printf 'Interactive mode is still in development\n'
            exit
            ;;
        --join|-j)
            socket="${2//=/}"
            EMACS_BUFFER_NAME="${EMACS_BUFFER_DEFAULT}"
            shift 2
            [[ ${#@} -gt 0 ]] && continue

            if [[ ${#socket} -eq 0 ]]; then
                printf '\e[37;4;2msockets\e[0m\n'
                select sock in "${arrSockets[@]/%/=}"
                do
                    socket="${sock//=/}"

                    exec command emacsclient -c -s "${socket}" "${@:3}" -- "${EMACS_BUFFER_NAME}"
                    exit
                done
            fi
            :
            check_for_socket "${socket}" "${arrSockets[@]}"
            if [[ $? -eq 0 ]]; then
                exec command emacsclient -q -c -s "${socket}" "${@:3}" -- "${EMACS_BUFFER_NAME}"
            elif [[ "${#arrSockets[@]}" -eq 0 ]]; then
                printf 'Daemon not found, no known process to join!\n'
                printf '`\e[36m%s -s\e[0m` to summon a daemon.\n' "${SCRIPT_NAME}"

            else
                printf 'Socket not found!\n'
                printf '`\e[36m%s -l\e[0m` to list sockets by name.\n' "${SCRIPT_NAME}"
                exit 1
            fi
            exit
            ;;
        --list|--list-daemons|-l|-ls)
            printf '\e[37;4;2m%s\e[0m\n' "${EMACS_SOCKET_DIR}"
            printf '|- \e[33m%s\e[0m\n' "${arrSockets[@]/%/=}"
            [[ ${#arrSockets[*]} -eq 0 ]] && \
                printf 'No daemons found.\n'
            exit
            ;;
        --list-very-verbose|-lvv)
            count_buffers
            get_pids
            printf '\e[37;4;2m%-20s %-23s %-20s\e[0m\n' "Daemon" "File #" "PID"
            paste <(printf '|- \e[33m%-20s\e[0m\n' "${arrSockets[@]/%/=}") <(printf '%-20s\n' "${arrBuffers[@]}") <(printf '%-20s\n' "${arr_pids[@]}")
            exit
            ;;
        --list-verbose|-lv)
            count_buffers
            printf '\e[37;4;2m%-20s %s\e[0m\n' "Daemon" "File #"
            paste <(printf '|- \e[33m%-20s\e[0m\n' "${arrSockets[@]/%/=}") <(printf '%s\n' "${arrBuffers[@]}")
            exit
            ;;
        --list-buffers|-lb)
            list_buffers
            printf '\e[37;4;2m%-20s %s\e[0m\n' "Daemon" "File buffers"
            paste <(printf '|- \e[33m%-20s\e[0m\n' "${arrSockets[@]/%/=}") <(printf '%s\n' "${arrBuffersData[@]}")
            exit
            ;;
        --kill-all|-ka)
            DIE=0
            ;&
        --stop|--kill|-k)
            socket="${2//=/}"
            :
            [[ "${#arrSockets[@]}" -eq 0 ]] && \
                printf 'No daemons to slay.\n' && exit
            :
            if [[ $DIE -eq 0 ]]; then
                for socket in $EMACS_SOCKET_DIR/*; do
                    if [[ -S $socket ]]; then
                        socket_name=$(basename ${socket})
                        command emacsclient -e '(kill-emacs)' -s "${socket_name}" &
                        printf 'Slaying daemon known as \e[33m%s\e[0m ...' "${socket_name/%/=}"
                        wait
                        printf ' done.\n'
                        printf ' So slain.\n'
                    fi
                done
                exit
            fi
            :
            if [[ "${#socket}" -ne 0 ]]; then
                check_for_socket "${socket}"
                if [[ $? -eq 1 ]]; then
                    printf "No such demon.\n"
                else
                    command emacsclient -e '(kill-emacs)' -s "${socket}"  && \
		                    printf 'Shutting down daemon "%s"\n' "${socket}"
                fi
                exit
            else
                printf "Choose a daemon to slay:\n" && \
                    select sock in "${arrSockets[@]}"
                    do
                        sock="${sock//=/}"
                        if [[ ${#sock} -eq 0  ]]; then
                            printf '\e[31mBad choice.\e[0m\n'
                            exec $0 -k
                        fi
                        command emacsclient -s "${sock}" -e '(kill-emacs)' && \
		                        printf 'Shutting down daemon "%s"\n' "${sock}"
                        exit
                    done
            fi
            :
            exit
            ;;
        --file|-f|--buffer|-b)
            if [[ ${#2} -eq 0 ]]; then
                printf 'No file or buffer specified!\n';exit
            else
                EMACS_BUFFER_NAME=$2
            fi
            ;;
        --start|--summon|-c|-s)
            IFS=,
            :
            [[ "${#2}" -ne 0 ]] && \
                EMACS_SERVER=$2
            :
            for daemon in $EMACS_SERVER; do
                :
                check_for_socket $daemon
                if [[ $? -eq 0 ]]; then
                    printf 'Daemon \e[33m%s\e[0m appears to be running. Do you wish to join?\n' "${EMACS_SERVER/%/=}"
                    select yn in "Yes" "No"
                    do
                        case $yn in
                            Yes ) exec $0 -j "$EMACS_SERVER" "${@:3}"
                                  exit
                                  ;;
                            No ) exit
                                 ;;
                        esac
                    done
                else
                    exec command emacs --user="${USER}" --daemon=$daemon > /dev/null 2>&1 &
                    printf '      Summoning the daemon \e[91m%s=\e[0m ...' "${daemon^^}"
                    wait %1
                    printf ' done. \n'
                    printf 'So summoned.\n'
                fi
            done
            exit
            ;;
        -D)
            printf 'Debug mode not ready!\n'
            exit
            ;;
        -z)
            # for tessting
            echo -e ${#@}
            ;;
        --help|-h)
            printf "\x1b[38;2;250;0;0m%s\x1b[0m\n" \
                   "BAPHOMET -- manage your emacs daemons"
            printf "\x1b[38;2;100;100;100m"
            cat <<'EOF'
 Usage: baphomet [switches] [arguments]
 -h,  --help                      Display help menu
 -s,  --start [name]              Start a daemon with name 'name'
 -k,  --kill, --stop [name]       Stop a daemon with name 'name'
 -ka, --kill-all                  Stop all daemons
 -j,  --join [name] -b [buffer]   Join a daemon with name 'name' and
                                       create a new buffer 'buffer'
 -l,  --list                      List known daemons
 -lv, --list-verbose              List daemons and file buffer count
 -lvv, --list-very-verbose        List daemons and file buffer count
                                       and daemon PID
 -i,  --interactive               Interactive mode

 -x,  --escape                    Exit script, run emacs as normal


Note:
 When called without arguments, baphomet starts a new daemon
      if necessary and opens a buffer with a default name.
 When called with only a buffer or filename, baphomet joins any daemon
      and creates buffer with specified name.

Examples with a daemon named 'joey'
 start daemon: baphomet --start joey
 stop daemon:  baphomet --stop joey
 join daemon:  baphomet --join joey

Disclaimer: Execute this script at your own peril.
EOF
            printf "\x1b[0m"
            exit
            ;;
        -*)
            printf '\e[31mUnknown argument "%s"\e[0m\n\v' "${1}"
            exit 1
            ;;
        *)
            break;
            ;;
            esac
    [[ "${#@}" -gt 0 ]] && shift 2
done


check_for_frames () {
    local EMACS_SERVER=$1
    [[ ${#EMACS_SERVER} -eq 0 ]] && \
        printf "You must specify a daemon!\n"

    check_for_socket "${EMACS_SERVER}"
    [[ $?  -eq 0 ]] && \
        command emacsclient -n -s "${EMACS_SERVER}" -e "${LISP_FRAME_CHECK}" | grep t > /dev/null 2>&1 && return $?

    return 1
}

check_for_socket "${arrSockets[0]}"
if [[ $? -ne 0 ]]; then
    QUICK=1 exec $0 -s "${EMACS_SERVER}" &
else
    EMACS_SERVER="${arrSockets[0]}"
fi
wait

check_for_frames "${EMACS_SERVER}"
if [ "$?" -eq 0 ]; then
    cmd='emacsclient -qc -s '
else
    cmd='emacsclient -q -s '
fi


[[ ${#EMACS_BUFFER_NAME} -eq 0 ]] && EMACS_BUFFER_NAME="${EMACS_BUFFER_DEFAULT}"

# when no arguments supplies, join the first daemon
if [[ ${#@} -eq 0 ]]; then
    eval "${cmd} ${EMACS_SERVER} ${EMACS_BUFFER_NAME}"
    exit
fi


case $1 in
    -i|--interactive)
        select option in 'List' 'Join' 'Summon'
        do
            case $option in
                'List')
                    exec "${0}" -l
                    ;;
                'Join')
                    exec "${0}" -j
                    ;;
                'Summon')
                    exec "${0}" -s
                    ;;
            esac
        done
        ;;
    -*)
        printf "Unknown.\n"
        exit 1
        ;;
    *)
        eval "${cmd} ${EMACS_SERVER} ${1}"
        exit
        #-e "${LISP_BUFFER_HEADER}"
        ;;
esac

exit 0
