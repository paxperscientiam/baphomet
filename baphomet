#!/usr/bin/env bash
:
# Execute this script at your own peril!
:
case $1 in
    -x|--escape)
        exec emacs "${@:2}"
        exit
        ;;
esac


# # # # #
# U T I L
# # # # #
containsElement () {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}


shopt -s extglob
shopt -s nullglob

userTest () {
    [[ ${#1} -ne 0 ]] && USER="${1}"
    :
    id -u "${USER}" >/dev/null 2>&1
    if [[ $? -eq 1 ]]; then
        printf 'The user %s is not known to exist.\n' "${USER^^}"; return 1
    fi
    return 0
}
userTest
:
EMACS_SOCKET_DIR="/tmp/baphomet/${USER}/"



[[ ! -d $EMACS_SOCKET_DIR  ]] && mkdir -p "${EMACS_SOCKET_DIR}"


LISP_FRAME_CHECK=$'(if (> (length (frame-list)) 1) '"'"'t)'
:
LISP_BUFFER_COUNT=$'(length (cl-remove-if-not '"'"'buffer-file-name (buffer-list)))'
:
LISP_BUFFER_LIST=$'(format "%s" (cl-remove-if-not '"'"'buffer-file-name (buffer-list)))'
:
LISP_PID=$'(emacs-pid)'
LISP_BUFFER_HEADER=$'(setq header-line-format "BAPHOMET")'
:
LISP_GREET_BUFFER=$''"'"'(with-output-to-temp-buffer
"BAPHOMET WELCOMES YOU" (print "You are free."))'"'"''

SCRIPT_NAME=$(basename $0)

ALTERNATE_EDITOR=""
EMACS_SERVER="${EMACS_SOCKET_DIR}/server"
EMACS_SERVER_RANDOM=""

EMACS_BUFFER_NAME="baphomet_default_buffer"
EMACS_BUFFER_DEFAULT="baphomet_default_buffer"

list_sockets () {
    local socket
    :
    arrSockets=("${EMACS_SOCKET_DIR}"/*)
    arrDaemons=()
    :
    for socket in "${arrSockets[@]}"
    do
        if [[ -S $socket ]]; then
            arrDaemons+=("$(basename ${socket})")
        fi
    done
}
# generate sockets array
list_sockets

query_daemon () {
    unset result
    local element
    local CMD="${!1}"
    :
    for s in ${arrSockets[@]}
    do
        read element < <(nc -U "${s}" <<< \
                            $"-eval ${CMD// /&_}" | \
                             awk $'NR == 2 {printf $2}')
        result+=("${element}")
    done
}


slay () {
    local socket="${EMACS_SOCKET_DIR}/$(basename "${1}")"
    nc -U "${socket}" <<< '-eval (kill-emacs)' >/dev/null 2>&1 &
    printf 'Slaying daemon known as \e[33m%s\e[0m ...' $(basename "${socket/%/=}")
    wait
    printf ' done.\n'
    printf ' So slain.\n'
}

while [[ ${#@} -ne 0 ]]
do
    case $1 in
        -i|--interactive)
            printf 'Interactive mode is still in development!!!1\n'
            break  3
            ;;
        # -u|--user)
        #     [[ ${#2} -eq 0 ]] && \
        #         printf 'A user must be specified!\n' && exit 1
        #     userTest "${2}"
        #     [[ $? -eq 1 ]] && exit 1
        #     :
        #     EMACS_SOCKET_DIR="/tmp/baphomet/${USER}/"
        #     #cmd_user=$"--user ${USER}"
        #     ;;
        --join|-j)
            daemon="${2//=/}"
            if [[ ${#daemon} -eq 0 ]]; then
                printf '\e[37;4;2m%s\e[0m\n' "${EMACS_SOCKET_DIR}"
                [[ "${#arrSockets[@]}" -eq 0 ]] && printf '|- There are no daemons here.\n' && exit
                select sock in "${arrSockets[@]}"
                do
                    exec emacsclient -c -s "${sock}" "${@:3}"
                    #-e "${LISP_GREET_BUFFER}"
                done
                exit
            fi
            :
            socket="${EMACS_SOCKET_DIR}/${daemon}"
            containsElement "${socket}" "${arrSockets[@]}"
            if [[ $? -eq 0 ]]; then
                exec emacsclient -q -c -s "${socket}" "${@:3}"
                #wait
                #query_daemon LISP_BUFFER_HEADER
                exit
            else
                printf 'Daemon not found!\n'
                #printf '`\e[36m%s -l\e[0m` to list daemons by name.\n' "${SCRIPT_NAME}"
                exec "${0}" -j
                exit 1
            fi
            exit
            ;;
        --list|--list-daemons|-l|-ls)
            printf '\e[37;4;2m%s\e[0m\n' "${EMACS_SOCKET_DIR}"
            if [[ ${#arrSockets[*]} -eq 0 ]]; then
                printf 'No daemons found.\n';exit
            fi
            printf '|- \e[33m%s\e[0m\n' "${arrDaemons[@]/%/=}"
            exit
            ;;
        --list-very-verbose|-lvv)
            query_daemon LISP_BUFFER_COUNT; arrBuffers=("${result[@]}")
            query_daemon LISP_PID; arr_pids=("${result[@]}")

            printf '\e[37;4;2m%s\e[0m\n\n' "${EMACS_SOCKET_DIR}"
            printf '\e[37;4;2m%-20s %-23s %-20s\e[0m\n' "Daemon" "File #" "PID"
            paste <(printf '|- \e[33m%-20s\e[0m\n' "${arrDaemons[@]/%/=}") <(printf '%-20s\n' "${arrBuffers[@]}") <(printf '%-20s\n' "${arr_pids[@]}")
            exit
            ;;
        --list-verbose|-lv)
            query_daemon LISP_BUFFER_COUNT; arrBuffers=("${result[@]}")
            :
            printf '\e[37;4;2m%s\e[0m\n\n' "${EMACS_SOCKET_DIR}"
            printf '\e[37;4;2m%-20s %s\e[0m\n' "Daemon" "File #"
            paste <(printf '|- \e[33m%-20s\e[0m\n' "${arrDaemons[@]/%/=}") <(printf '%s\n' "${arrBuffers[@]}")
            exit
            ;;
        --list-buffers|-lb)
            query_daemon LISP_BUFFER_LIST
            printf '\e[37;4;2m%-20s %s\e[0m\n' "Daemon" "File buffers"
            paste <(printf '|- \e[33m%-20s\e[0m\n' "${arrSockets[@]/%/=}") <(printf '%s\n' "${arrBuffersData[@]}")
            exit
            ;;
        --kill-all|-ka)
            DIE="DIE"
            ;&
        --stop|--kill|-k)
            :
            printf '\e[37;4;2m%s\e[0m\n' "${EMACS_SOCKET_DIR}"
            [[ "${#arrSockets[@]}" -eq 0 ]] && \
                printf 'No daemons to slay.\n' && exit
            :
            if [[ $DIE == "DIE" ]]; then
                for socket in "${arrSockets[@]}"
                do
                    slay "${socket}"
                done
                exit
            fi
            :
            daemon="${2}"
            socket="${EMACS_SOCKET_DIR}/${daemon}"
            if [[ ${#daemon} -eq 0 ]]
            then
                printf "Choose a daemon to slay:\n" && \
                    select sock in "${arrSockets[@]}"
                    do
                        if [[ ${#sock} -eq 0  ]]; then
                            printf '\e[31mBad choice.\e[0m\n'
                            exec "${0}" -k
                        fi
                        slay "${sock}"
                        exit
                    done
            fi
            :
            if [[ "${#daemon}" -ne 0 ]]; then
                containsElement "${socket}" "${arrSockets[@]}"
                if [[ $? -eq 1 ]]; then
                    printf "No such demon.\n"
                else
                    slay "${socket}"
                fi
                exit
            fi
            :
            exit
            ;;
        --file|-f|--buffer|-b)
            if [[ ${#2} -eq 0 ]]; then
                printf 'No file or buffer specified!\n';exit
            else
                EMACS_BUFFER_NAME="${2}"
            fi
            ;;
        --start|--summon|-c|-s)
            IFS=,
            :
            [[ "${#2}" -ne 0 ]] && \
                EMACS_SERVER="${2}"
            :
            for daemon in $EMACS_SERVER; do
                :
                socket="${EMACS_SOCKET_DIR}/${daemon}"
                containsElement "${socket}" "${arrSockets[@]}"
                if [[ $? -eq 0 ]]; then
                    exec $0 -j "$EMACS_SERVER" "${@:3}"

                else
                    exec emacs --user="${USER}" --daemon="${socket}" > /dev/null 2>&1 &
                    printf '      Summoning the daemon \e[91m%s=\e[0m ...' "${daemon^^}"
                    wait %1
                    printf ' done. \n'
                    printf 'So summoned.\n'
                fi
            done
            exit
            ;;
        -D)
            printf 'Debug mode not ready!\n'
            exit
            ;;
        -W)
            printf 'Watch all daemonic activity.\n'
            exit
            ;;
        -z)
            # for tessting
            echo -e ${#@}
            ;;
        --help|-h)
            printf "\x1b[38;2;250;0;0m%s\x1b[0m\n" \
                   "BAPHOMET -- manage your emacs daemons"
            printf "\x1b[38;2;100;100;100m"
            cat <<'EOF'
 Usage: baphomet [switches] [arguments]
 -h,  --help                      Display help menu
 -s,  --start [name]              Start a daemon with name 'name'
 -k,  --kill, --stop [name]       Stop a daemon with name 'name'
 -ka, --kill-all                  Stop all daemons
 -j,  --join [name] -b [buffer]   Join a daemon with name 'name' and
                                       create a new buffer 'buffer'
 -l,  --list                      List known daemons
 -lv, --list-verbose              List daemons and file buffer count
 -lvv, --list-very-verbose        List daemons and file buffer count
                                       and daemon PID
 -i,  --interactive               Interactive mode

 -x,  --escape                    Exit script, run emacs as normal


Note:
 When called without arguments, baphomet starts a new daemon
      if necessary and opens a buffer with a default name.
 When called with only a buffer or filename, baphomet joins any daemon
      and creates buffer with specified name.

Examples with a daemon named 'joey'
 start daemon: baphomet --start joey
 stop daemon:  baphomet --stop joey
 join daemon:  baphomet --join joey

Disclaimer: Execute this script at your own peril.
EOF
            printf "\x1b[0m"
            exit
            ;;
        -*)
            printf '\e[31mUnknown argument "%s"\e[0m\n\v' "${1}"
            exit 1
            ;;
        *)
            break;
            ;;
    esac
    [[ "${#@}" -gt 0 ]] && shift 2
done


case $1 in
    -i|--interactive)
        select option in 'List' 'Join' 'Summon' 'Quit'
        do
            case $option in
                'List')
                    exec "${0}" -l
                    ;;
                'Join')
                    exec "${0}" -j
                    ;;
                'Summon')
                    exec "${0}" -s
                    ;;
                'Quit')
                    exit
                    ;;
                *)
                    printf 'Invalid choice.\n'
                    ;;
            esac
        done
        ;;
esac


socket="${arrSockets[0]}"
[[ ${#socket} -eq 0 ]] && exec $0 -s

echo ROFL



exit

check_for_frames () {
    local EMACS_SERVER=$1
    [[ ${#EMACS_SERVER} -eq 0 ]] && \
        printf "You must specify a daemon!\n"

    containsElement "${socket}" "${arrSockets[@]}"
    [[ $?  -eq 0 ]] && \
        emacsclient -n -s "${EMACS_SERVER}" -e "${LISP_FRAME_CHECK}" | grep t > /dev/null 2>&1 && return $?

    return 1
}

containsElement "${socket}" "${arrSockets[@]}"
if [[ $? -ne 0 ]]; then
    QUICK=1 exec $0 -s "${EMACS_SERVER}" &
else
    EMACS_SERVER="${arrSockets[0]}"
fi
wait
exit

check_for_frames "${EMACS_SERVER}"
if [ "$?" -eq 0 ]; then
    cmd='emacsclient -c -s '
else
    cmd='emacsclient -s '
fi


[[ ${#EMACS_BUFFER_NAME} -eq 0 ]] && EMACS_BUFFER_NAME="${EMACS_BUFFER_DEFAULT}"

# when no arguments supplies, join the first daemon
if [[ ${#@} -eq 0 ]]; then
    exec eval "${cmd} ${EMACS_SERVER} -e ${LISP_GREET_BUFFER}"
    exit
fi



exit 0
