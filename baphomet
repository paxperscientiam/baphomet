#!/usr/bin/env bash
:

shopt -s nullglob
shopt -s extglob
#shopt -s nocasematch


# case $1 in
#     a*             ) foo;;    # matches anything starting with "a"
#     b?             ) bar;;    # matches any two-character string starting with "b"
#     c[de]          ) baz;;    # matches "cd" or "ce"
#     me?(e)t        ) qux;;    # matches "met" or "meet"
#     @(a|e|i|o|u)   ) fuzz;;   # matches one vowel
#     m+(iss)?(ippi) ) fizz;;   # matches "miss" or "mississippi" or others
#                      esac
#                      exit



SCRIPT_NAME=$(basename $0)

ALTERNATE_EDITOR=""
EMACS_SERVER="server"
EMACS_SERVER_RANDOM=""
EMACS_SOCKET_DIR="${TMPDIR-/tmp}/emacs$(id -u)/"

EMACS_BUFFER_NAME=""
EMACS_BUFFER_DEFAULT="baphomet_default_buffer"

readonly ERR_MISSING_SOCKET=404


# # # # #
# U T I L
# # # # #
containsElement () {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}

list_sockets () {
    read -r -a Msg <<< \
         '# generate list of daemon sockets'
    [[ $1 == "DEBUG" ]] && printf '%s\n' "${Msg[*]}"
    
    
    arrSockets=()
    :
    for socket in $EMACS_SOCKET_DIR/*; do
        [[ -S $socket ]] && \
            arrSockets+=("$(basename ${socket})")
    done
}
list_sockets

check_for_socket () {
    :
    # check if supplied socket ref exists
    if [[ ${#1} -ne 0 ]]; then
        containsElement "${1//=/}" "${arrSockets[@]}";
        return $?
    fi
    :
    return 1
}

# jump between daemons
# new buffer when starting daemon
# handle arbitrary options
# include image of baphomet
# probably want an interative switch? mehhhh
# wikipedia save
# hm, a universal keyboard using registers or whatever might be nice...
# annotate functions
# option to kill only clientless daemons
# suggest daemon names

while [[ ${#@} -ne 0 ]]
do
    case $1 in
        --join|-j)
            socket="${2//=/}"

            if [[ ${#socket} -eq 0 ]]; then
                printf '\e[37;4;2msockets\e[0m\n'
                select sock in "${arrSockets[@]}"
                do
                    socket="${sock//=/}"
                    exec command emacsclient -c -s "${socket}" "${@:3}"
                    exit
                done
            fi
            :
            check_for_socket "${2//=/}" "${arrSockets[@]}"
            if [[ $? -eq 0 ]]; then            
                exec command emacsclient -q -c -s "${socket}" "${@:3}"
            elif [[ "${#arrSockets[@]}" -eq 0 ]]; then
                printf 'Socket not found, no known process to join!\n'
                printf '`\e[36m%s -s\e[0m` to summon a daemon.\n' "${SCRIPT_NAME}"
                
            else
                printf 'Socket not found!\n'
                printf '`\e[36m%s -l\e[0m` to list sockets by name.\n' "${SCRIPT_NAME}"
                exit 1
            fi              
            exit
            ;;
        --list|--list-daemons|-l)
            # list buffers too
            # list_sockets
            printf '\e[37;4;2m%s\e[0m\n' $EMACS_SOCKET_DIR
            printf '|- \e[33m%s=\e[0m\n' "${arrSockets[@]}"
            [[ ${#arrSockets[*]} -eq 0 ]] && \
                printf 'No sockets found.\n'
            exit
            ;;
        --kill-all|-ka)
            DIE=0
            exec $0 --stop all            
            exit
            ;;
        --stop|--kill|-k)
            socket="${2//=/}"
            :
            [[ "${#arrSockets[@]}" -eq 0 ]] && \
                printf 'No daemons to slay.\n' && exit
            :  
            :
            if [[ $2 == "all" && $DIE -eq 0 ]]; then
                for socket in $EMACS_SOCKET_DIR/*; do
                    if [[ -S $socket ]]; then
                        socket_name=$(basename ${socket})
                        command emacsclient -e '(kill-emacs)' -s $socket_name &
                        printf 'Slaying daemon known as \e[33m%s=\e[0m ...' "${socket_name}"
                        wait
                        printf " done\n"
                    fi                    
                done
                exit
            fi
            :
            if [[ "${#socket}" -ne 0 ]]; then
                check_for_socket "${socket}"
                if [[ $? -eq 1 ]]; then
                    printf "No such demon.\n"
                else
                    command emacsclient -e '(kill-emacs)' -s "${socket}"  && \
		                    printf 'Shutting down daemon "%s"\n' "${socket}"                        
                fi
                exit
            else
                printf "Choose a demon to slay:\n" && \
                    select sock in "${arrSockets[@]}"
                    do
                        sock="${sock//=/}"
                        if [[ ${#sock} -eq 0  ]]; then
                            printf '\e[31mBad choice.\e[0m\n'
                            exec $0 -k
                        fi
                        command emacsclient -s "${sock}" -e '(kill-emacs)' && \
		                        printf 'Shutting down daemon "%s"\n' "${sock}"
                        exit
                    done        
            fi
            :
            exit
            ;;
        # --file|-f|--buffer|-b)
        #     if [[ ${#2} -eq 0 ]]; then
        #         echo 'no file specified';exit
        #     else
        #         EMACS_BUFFER_NAME=$2
        #     fi
        #     shift 2
        #     ;&
        --start|--summon|-c|-s)
            [[ "${#2}" -ne 0 ]] && \
                EMACS_SERVER="${2}"                
            :
            check_for_socket "$EMACS_SERVER"
            if [[ $? -eq 0 ]]; then
                printf 'Daemon \e[33m%s=\e[0m appears to be running. Do you wish to join?\n' "${EMACS_SERVER}"
                select yn in "Yes" "No"
                do
                    case $yn in
                        Yes ) exec $0 -j "$EMACS_SERVER" "${@:3}"
                              exit
                              ;;
                        No ) exit
                             ;;
                    esac
                done
            else
                exec command emacs --user="${USER}" --daemon="${EMACS_SERVER}" &>/dev/null &
                printf "      Summoning daemon ..."
                wait %1
                printf " done.\n"
            fi
            exit
            ;;
        --help|-h)
            cat << 'EOF'
BAPHOMET -- manage your emacs daemons
 Usage: $SCRIPT_NAME [switches] [arguments]
 -h, --help                    Display help menu
 -s, --start [name]            Start a daemon with name 'name'
 -k, --kill, --stop [name]     Stop a daemon with name 'name'
 -j, --join [name] -b [buffer]    Join a daemon with name 'name' and
                                   create a new buffer 'buffer'
 -l, --list                    List known daemons

Examples with a daemon named 'baphomet'
 start daemon: $SCRIPT_NAME --start baphomet
 stop daemon:  $SCRIPT_NAME --stop baphomet
 join daemon:  $SCRIPT_NAME --join baphomet

EOF
            exit
            ;;
        -D)
            echo debug
            break
            ;;
        -*)
            printf '\e[31mUnknown argument "%s".\e[0m\n' $1
            exit 1
            ;;
        *) break
           ;;
    esac
done


# case $1 in
#     -D)
#         if [[ ${#2} -ne 0 ]]; then
#             echo shit
#             list_sockets DEBUG
#         fi
#         exit
#         ;;
# esac
check_for_frames () {
    local EMACS_SERVER=$1
    [[ ${#EMACS_SERVER} -eq 0 ]] && \
        printf "You must specify a daemon!\n"

    check_for_socket "${EMACS_SERVER}" 
    [[ $?  -eq 0 ]] && \
        command emacsclient -n -s "${EMACS_SERVER}" -e "(if (> (length (frame-list)) 1) 't)" | grep t &>/dev/null && return $?

    return 1
}


check_for_socket "${EMACS_SERVER}"
[[ $? -ne 0 ]] && exec $0 -s "${EMACS_SERVER}"
wait

check_for_frames "${EMACS_SERVER}"
if [ "$?" -eq 0 ]; then
    cmd='emacsclient -qc -s '
else
    cmd='emacsclient -q -s '
fi

# when no arguments supplies, join the first daemon
if [[ ${#@} -eq 0 ]]; then
    eval "${cmd} ${EMACS_SERVER} ${EMACS_BUFFER_DEFAULT}"
else
    select option in 'List' 'Join' 'Summon'
    do
        case $option in
            'List')
                exec "${0}" -l "${@}"
                ;;
            'Join')
                exec "${0}" -j "${EMACS_SERVER}" "${@}"
                ;;
            'Summon')
                exec "${0}" -s "${EMACS_SERVER}" "${@}"
                ;;
        esac
        exit
    done
fi
exit 0
