#!/usr/bin/env bash


:
source ~/bin/spin.bash
:
shopt -s nullglob
shopt -s extglob


# case $1 in
#     a*             ) foo;;    # matches anything starting with "a"
#     b?             ) bar;;    # matches any two-character string starting with "b"
#     c[de]          ) baz;;    # matches "cd" or "ce"
#     me?(e)t        ) qux;;    # matches "met" or "meet"
#     @(a|e|i|o|u)   ) fuzz;;   # matches one vowel
#     m+(iss)?(ippi) ) fizz;;   # matches "miss" or "mississippi" or others
#                      esac
#                      exit


# case $1 in
#     --kill-all              ) echo $1
#                       ;;
# esac
# exit




SCRIPT_NAME=$(basename $0)

ALTERNATE_EDITOR=""
EMACS_SERVER="server"
EMACS_SERVER_RANDOM=""
EMACS_SOCKET_DIR="${TMPDIR-/tmp}/emacs$(id -u)/"

EMACS_BUFFER_NAME=""

readonly ER_MISSING=404


# # # # #
# U T I L
# # # # #
containsElement () {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}


list_sockets () {
    arrSockets=()
    :
    for socket in $EMACS_SOCKET_DIR/*; do
        [[ -S $socket ]] && \
            arrSockets+=("$(basename ${socket})")
    done
}
# generate list of daemon sockets
list_sockets

check_for_socket () {
    :
    # check if supplied socket ref exists
    [[ $# -ne 0 ]] && \
        containsElement "${1//=/}" "${arrSockets[@]}" && \
        return $?

    # join any
    [[ "${#arrSockets[@]}" -ne 0 ]] && \
        EMACS_SERVER="${arrSockets[0]}" && \
        return $?

    return $ER_MISSING
}

# jump between daemons
# new buffer when starting daemon
# handle arbitrary options
# include image of baphomet
# probably want an interative switch? mehhhh


key="$1"
value="$2"

while [[ ${#@} -ne 0 ]]
do
    case $1 in
        --join|-j)
            socket="${2//=/}"
            socket="${2//=/}"
            buffer="${3}"
            
            [[ "${#arrSockets[@]}" -eq 0 ]] && \
                printf 'No sockets found!\n' && exit
            :
            [[ "${#arrSockets[@]}" -eq 1 && "${#socket}" -eq 0 ]] && \
                exec command emacsclient -c -s "${arrSockets[0]}"
            exit
            
            :
            if [[ ${#socket} -eq 0 ]]; then
                printf '\e[37;4;2msockets\e[0m\n'
                select sock in "${arrSockets[@]}"
                do
                    socket="${sock//=/}"
                    exec command emacsclient -c -s "${socket}" -e '(momentary-string-display "hello there" 200)'
                    exit
                done
            fi
            
            if [[ ${#sock} -ne 0 ]]; then
                check_for_socketet $sock
                if [[ $? -eq 0 ]]; then            
                    exec command emacsclient -q -c -s "${socket}" "${@:3}"
                else
                    printf 'Socket not found, no known process to join!\n'
                    printf '`\e[36m%s -l\e[0m` to list sockets by name.\n' "${SCRIPT_NAME}"
                    exit 1
                fi        
            fi
            exit
            ;;
        --list|--list-daemons|-l)
            # list buffers too
            # list_sockets
            printf '\e[37;4;2m%s\e[0m\n' $EMACS_SOCKET_DIR
            printf '|- \e[33m%s=\e[0m\n' "${arrSockets[@]}"
            [[ ${#arrSockets[*]} -eq 0 ]] && \
                printf 'No sockets found.\n'
            exit
            ;;
        --kill-all)
            2="all"
            ;&
        --stop|--kill|-k)
            :
            [[ "${#arrSockets[@]}" -eq 0 ]] && printf 'No daemons to slay.\n' && exit
            :
            case $2 in
                all)
                    for socket in $EMACS_SOCKET_DIR/*; do
                        if [[ -S $socket ]]; then
                            socket_name=$(basename ${socket})
                            command emacsclient -e '(kill-emacs)' -s $socket_name &
                            printf 'Slaying daemon known as \e[33m%s=\e[0m ...' "${socket_name}"
                            wait
                            printf " done\n"
                        fi                    
                    done
                    exit
                    ;;
            esac
            
            if [[ ${#2} -ne 0 ]]; then
                check_for_socket $2
                if [[ $? -eq 1 ]]; then
                    printf "No such demon.\n"
                else
                    command emacsclient -e '(kill-emacs)' -s $2  && \
		                    printf 'Shutting down daemon "%s"\n' "${2}"                        
                fi
                exit
            fi
            :
            [[ "${#2}" -eq 0 ]] && \
                printf "Choose a demon to slay:\n" && \
                select sock in "${arrSockets[@]}="
                do
                    socket="${sock//=/}"
                    if [[ ${#socket} -eq 0  ]]; then
                        printf '\e[31mBad choice.\e[0m\n'
                        exec $0 -k
                    fi
                    command emacsclient -s $socket -e '(kill-emacs)' && \
		                    printf 'Shutting down daemon "%s"\n' "${socket}"
                    exit
                done        
            :
            exit
            ;;
        --file|-f|--buffer|-b)
            if [[ ${#2} -eq 0 ]]; then
                echo 'no file specified';exit
            else
                EMACS_BUFFER_NAME=$2
            fi
            shift 2
            ;&
        --start|-c|-s)
            EMACS_SERVER=$2
            shift 2
            case $1 in
                -f)
                    EMACS_BUFFER_NAME=$2
                    ;;
            esac
            :
            check_for_socket "$EMACS_SERVER"
            if [[ $? -eq 0 ]]; then
                if [[ ${#EMACS_BUFFER_NAME} -eq 0 ]];then
	                  printf 'Daemon \e[33m%s=\e[0m appears to be running.\n' "$2"
	                  exit
                else
                    exec $0 -j "$EMACS_SERVER" "$EMACS_BUFFER_NAME"
                    exit
                fi                   
            fi
            :
            if [[ ${#EMACS_BUFFER_NAME} -ge 0 ]]; then
                exec command emacs --user=${USER} --daemon=${EMACS_SERVER} &>/dev/null &
                printf "      Summoning daemon ..."
                spinner 5
                wait %1
                #            kill %2
                printf " done.\n"
                exec emacsclient -nw --socket-name=${EMACS_SERVER} -- ${EMACS_BUFFER_NAME}            
            else
                exec command emacs -u ${USER} --daemon=${EMACS_SERVER}
            fi
            exit
            ;;
        --help|-h)
            cat << 'EOF'
Usage: $SCRIPT_NAME [switches] [arguments]
-h, --help                    Display help menu
-s, --start [name]            Start a daemon with name 'name'
-k, --kill, --stop [name]     Stop a daemon with name 'name'
-j, --join [name] -b [buffer]    Join a daemon with name 'name' and
                               create a new buffer 'buffer'
-l, --list                    List known daemons

Examples with a daemon named 'baphomet'
 start daemon: $SCRIPT_NAME --start baphomet
 stop daemon:  $SCRIPT_NAME --stop baphomet
 join daemon:  $SCRIPT_NAME --join baphomet

EOF
            exit
            ;;
        -*)
            printf '\e[31mUnknown argument "%s".\e[0m\n' $1
            exit 1
            ;;
    esac
done



check_for_socket
if [[ $? -eq 0 ]]; then
    command emacsclient -q -c -s "${EMACS_SERVER}" "$@"
else
    printf 'Default Socket not found! Here are your options:\n'
    select option in 'List daemons' 'Join' 'Create'
    do
        case $option in
            'List daemons')
                exec $0 -l
                ;;
            'Join')
                exec $0 -j
                ;;
            'Create')
                exec $0 -s
                ;;
        esac
        exit
    done
fi
exit 0


# lisp="(defmacro safe-wrap (fn \&rest clean-up)
#   \`(unwind-protect
#        (let (retval)
#          (condition-case ex
#              (setq retval (progn \,fn))
#            (\'error
#             (message (format \"Caught exception\: [\%s]\" ex))
#             (setq retval (cons \'exception (list ex)))))
#          retval)
#      \,\@clean-up))
#      (safe-wrap (error (kill-emacs 7)) (message \"Unwinding...\"))"
# command emacs -batch -eval "${lisp} --kill"
# exit

# # check if server running
# command emacs -batch --eval "(server-eval-at \"serve-you-right\" '(+ 1 2))"

# # check if there is any frame to attach to
# command emacsclient -n -s serve-you-right -e "(if (> (length (frame-list)) 1) 't)"
# exit
# screencmd="command emacs -nw -u ${USER} --daemon=serve-you-right"
# # check if a daemon is running already
# command emacsclient -batch --eval '(unless (daemonp) (kill-emacs 7)) --kill'
# echo $?;exit
# if [ $? -eq 1 ]; then
#     echo "starting server"
#     screen -S emacs-daemon -dm bash -c "${screencmd}"
# else
#     echo "attaching client"
#     exec emacsclient -q --alternate-editor="" -c -s serve-you-right "$@"
# fi
# #command emacs -nw -u "${USER}" --daemon="${EMACS_SERVER_NAME}"
# # printf 'Starting emacs server "%s"\n' "${EMACS_SERVER_NAME}"
# # exec emacsclient -q --alternate-editor="" \
    #     #      -c -s "${EMACS_SERVER_NAME}" "$@"
# # Checks if there's a frame open
# # emacsclient -n -s "${EMACS_SERVER_NAME}" -e "(if (> (length (frame-list)) 1) 't)" | grep t
# # if [ "$?" -eq 0 ]; then
# #     emacsclient -a '' -qc -s "${EMACS_SERVER_NAME}" "$@" &> /dev/null
# # else
# #     emacsclient -nq -s "${EMACS_SERVER_NAME}" "$@" &> /dev/null
# # fi
