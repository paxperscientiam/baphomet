#!/usr/bin/env bash
:
shopt -s nullglob

SCRIPT_NAME=$(basename $0)

ALTERNATE_EDITOR=""
EMACS_SERVER="server"
EMACS_SERVER_RANDOM=""
EMACS_SOCKET_DIR="${TMPDIR-/tmp}/emacs$(id -u)/"

EMACS_BUFFER_NAME=""

readonly ER_MISSING=404


# # # # #
# U T I L
# # # # #
containsElement () {
    local e match="$1"
    shift
    for e; do [[ "$e" == "$match" ]] && return 0; done
    return 1
}


list_sockets () {
    arrSockets=()
    :
    for socket in $EMACS_SOCKET_DIR/*; do
        [[ -S $socket ]] && \
            arrSockets+=("$(basename ${socket})")
    done
    if [[ $# -ne 0 ]]; then
        echo $1
        containsElement "${1//=/}" "${arrSockets[@]}"
        return $?
    fi        
}
list_sockets &>/dev/null

check_for_socket () {
    :
    # check if supplied socket ref exists
    containsElement "${1//=/}" "${arrSockets[@]}"
    return $?
    
    # if [[ $# -ne 0 ]]; then
    #     [[ -S $EMACS_SOCKET_DIR/$1 ]] && return 0
    #     return $ER_MISSING
    # fi
    # # if it doesn't exist, see if a single one does...
    # if [[ $? -eq -1 ]]; then
    #     if [[ "${#arrSockets[@]}" -eq 1 ]]; then
    #         EMACS_SERVER="${arrSockets[0]}"
    #     fi
    # fi
}


count_sockets () {
    SOCKET_COUNT=()
    for socket in $EMACS_SOCKET_DIR/*; do
        if [[ -S $socket ]]; then
            SOCKET_COUNT=$(( $SOCKET_COUNT + 1 ))
        fi
    done
}
count_sockets # count the sockets


# kill multiple in one command
# jump between daemons
# new buffer when starting daemon
# handle arbitrary options
# include image of baphomet


key="$1"
value="$2"

case $key in
    --join|-j)
        socket="${value//=/}"
        buffer="${3}"
        
        [[ "${#arrSockets[@]}" -eq 0 ]] && \
            printf 'No sockets found!\n' && exit
        :
        sock="${value//=/}"
        :
        if [[ ${#sock} -eq 0 ]]; then
            printf '\e[37;4;2msockets\e[0m\n'
            select sock in "${arrSockets[@]}"
            do
                sock="${sock//=/}"
                exec command emacsclient -q -c -s "${sock}" -e '(momentary-string-display "hello there" 200)'
                exit
            done
        fi
        
        if [[ ${#sock} -ne 0 ]]; then
            check_for_socket $sock
            if [[ $? -eq 0 ]]; then            
                exec command emacsclient -q -c -s "${sock}" "${@:3}"
            else
                printf 'Socket not found, no known process to join!\n'
                printf '`\e[36m%s -l\e[0m` to list sockets by name.\n' "${SCRIPT_NAME}"
                exit 1
            fi        
        fi
        exit
        ;;
    --list|--list-daemons|-l)
        # list buffers too
        # list_sockets
        printf '\e[37;4;2m%s\e[0m\n' $EMACS_SOCKET_DIR
        printf '|- \e[33m%s=\e[0m\n' "${arrSockets[@]}"
        [[ ${#arrSockets[*]} -eq 0 ]] && \
            printf 'No sockets found.\n'
        exit
        ;;
    --stop|--kill|-k)
        :
        [[ "${#arrSockets[@]}" -eq 0 ]] && printf 'No daemons to slay.\n' && exit
        :
        case $value in
            all)
                for socket in $EMACS_SOCKET_DIR/*; do
                    if [[ -S $socket ]]; then
                        socket_name=$(basename ${socket})
                        command emacsclient -e '(kill-emacs)' -s $socket_name &
                        printf 'Slaying daemon known as \e[33m%s=\e[0m ...' "${socket_name}"
                        wait
                        printf " done\n"
                    fi                    
                done
                exit
                ;;
        esac
        
        if [[ ${#value} -ne 0 ]]; then
            check_for_socket $value
            if [[ $? -eq 1 ]]; then
                printf "No such demon.\n"
            else
                command emacsclient -e '(kill-emacs)' -s $value  && \
		                printf 'Shutting down daemon "%s"\n' "${value}"                        
            fi
            exit
        fi
        :
        [[ "${#value}" -eq 0 ]] && \
            printf "Choose a demon to slay:\n" && \
            select sock in "${arrSockets[@]}="
            do
                sock="${sock//=/}"
                if [[ ${#sock} -eq 0  ]]; then
                    printf '\e[31mBad choice.\e[0m\n'
                    exec $0 -k
                fi
                command emacsclient -s $sock -e '(kill-emacs)' && \
		                printf 'Shutting down daemon "%s"\n' "${sock}"
                exit
            done        
        :
        exit
        ;;
    --file|-f|--buffer|-b)
        if [[ ${#2} -eq 0 ]]; then
            echo 'no file specified';exit
        else
            EMACS_BUFFER_NAME=$2
        fi
        shift 2
        ;&
    --start|-c|-s)
        EMACS_SERVER=$2
        :
        check_for_socket "$EMACS_SERVER"
        if [[ $? -eq 0 ]]; then
	          printf 'Daemon \e[33m%s=\e[0m appears to be running.\n' "$2"
	          exit
        fi

        if [[ ${#EMACS_BUFFER_NAME} -ge 0 ]]; then
            exec command emacs --user=${USER} --daemon=${EMACS_SERVER} &>/dev/null &
            printf "Loading daemon ..."
            wait
            printf " done.\n"
            exec emacsclient -nw --socket-name=${EMACS_SERVER} -- ${EMACS_BUFFER_NAME}            
        else
            exec command emacs -u ${USER} --daemon=${EMACS_SERVER}
        fi
            
        # if [[ $? -ne 0 ]]; then
        #    
	      #     exec command emacs -nw -u ${USER} --daemon=${EMACS_SERVER} "${@:3}" &>/dev/null &
        #     printf "Loading daemon ..."
        #     wait
        #     printf " done\n"
	      #     exit
	      # else
	      #     printf 'Daemon \e[33m%s=\e[0m appears to be running.\n' "$2"
	      #     exit
	      # fi
   #     exec command emacs -nw -u ${USER} --daemon=${EMACS_SERVER} --file=${EMACS_BUFFER_NAME}        
        ;;
    --help|-h)
        cat << EOM
Usage: $SCRIPT_NAME [switches] [arguments]
-h, --help                    Display help menu
-s, --start [name]            Start a daemon with name 'name'
-k, --kill, --stop [name]     Stop a daemon with name 'name'
-j, --join [name] [buffer]    Join a daemon with name 'name' and
                               create a new buffer 'buffer'
-l, --list                    List known daemons

Examples with a daemon named 'baphomet'
 start daemon: $SCRIPT_NAME --start baphomet
 stop daemon:  $SCRIPT_NAME --stop baphomet
 join daemon:  $SCRIPT_NAME --join baphomet


EOM
        exit
        ;;
    -*)
        printf '\e[31mUnknown argument "%s".\e[0m\n' $key
        exit
        ;;
esac
exit
check_for_socket
if [[ $STATUS -eq 0 ]]; then
    command emacsclient -q -c -s "${EMACS_SERVER}" "$@"
    exit
else
    printf 'Default Socket not found! Here are your options:\n'
    select option in 'List daemons' 'Join'
    do
        case $option in
            'List daemons')
                exec $0 -l
                ;;
            'Join')
                exec $0 -j
                ;;
        esac
        exit
    done
fi
exit 0


# lisp="(defmacro safe-wrap (fn \&rest clean-up)
#   \`(unwind-protect
#        (let (retval)
#          (condition-case ex
#              (setq retval (progn \,fn))
#            (\'error
#             (message (format \"Caught exception\: [\%s]\" ex))
#             (setq retval (cons \'exception (list ex)))))
#          retval)
#      \,\@clean-up))
#      (safe-wrap (error (kill-emacs 7)) (message \"Unwinding...\"))"
# command emacs -batch -eval "${lisp} --kill"
# exit

# # check if server running
# command emacs -batch --eval "(server-eval-at \"serve-you-right\" '(+ 1 2))"

# # check if there is any frame to attach to
# command emacsclient -n -s serve-you-right -e "(if (> (length (frame-list)) 1) 't)"
# exit
# screencmd="command emacs -nw -u ${USER} --daemon=serve-you-right"
# # check if a daemon is running already
# command emacsclient -batch --eval '(unless (daemonp) (kill-emacs 7)) --kill'
# echo $?;exit
# if [ $? -eq 1 ]; then
#     echo "starting server"
#     screen -S emacs-daemon -dm bash -c "${screencmd}"
# else
#     echo "attaching client"
#     exec emacsclient -q --alternate-editor="" -c -s serve-you-right "$@"
# fi
# #command emacs -nw -u "${USER}" --daemon="${EMACS_SERVER_NAME}"
# # printf 'Starting emacs server "%s"\n' "${EMACS_SERVER_NAME}"
# # exec emacsclient -q --alternate-editor="" \
    #     #      -c -s "${EMACS_SERVER_NAME}" "$@"
# # Checks if there's a frame open
# # emacsclient -n -s "${EMACS_SERVER_NAME}" -e "(if (> (length (frame-list)) 1) 't)" | grep t
# # if [ "$?" -eq 0 ]; then
# #     emacsclient -a '' -qc -s "${EMACS_SERVER_NAME}" "$@" &> /dev/null
# # else
# #     emacsclient -nq -s "${EMACS_SERVER_NAME}" "$@" &> /dev/null
# # fi
